---
:body: こんにちは。
:fromNick: Default
---
:body: おはよう。
:fromNick: Default
---
:body: こんばんは。
:fromNick: Default
---
:body: 何？
:fromNick: Default
---
:body: 不確定だ。
:fromNick: Default
---
:body: どうして？
:fromNick: Default
---
:body: なんでやねん。
:fromNick: Default
---
:fromNick: test
:body: hi
---
:fromNick: ! '!'
:body: hi
---
:fromNick: test
:body: hi
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: 最近の発言者
---
:fromNick: ! '!'
:body: hi
---
:fromNick: test
:body: 最近の発言者
---
:fromNick: ! '!'
:body: 最近の発言者
---
:fromNick: test
:body: 授業支援で利用されている履修情報は、システムの便宜上に修正されている場合があります。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: こんばんは。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 何？
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 不確定だ。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: どうして？
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: hi
---
:fromNick: ! '!'
:body: 最近の発言者
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: こんばんは。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 何？
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 授業支援で利用されている履修情報は、システムの便宜上に修正されている場合があります。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: 議事録管理システム 停止のお知らせ
---
:fromNick: ! '!'
:body: こんばんは。
---
:fromNick: test
:body: 下記の時間帯は稼働を停止しておりますので、学事Webシステムを利用することができません。
---
:fromNick: ! '!'
:body: 何？
---
:fromNick: test
:body: 予めご了承の程、宜しくお願い致します。
---
:fromNick: ! '!'
:body: 不確定だ。
---
:fromNick: test
:body: 集合の積演算です。両方の配列に含まれる要素からなる新しい配列を返 します。重複する要素は取り除かれます。
---
:fromNick: ! '!'
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: test
:body: 要素の重複判定は、Object#eql? により行われます。
---
:fromNick: ! '!'
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: test
:body: 処理の高速化のために内部で Hash を使用しているためです。@param other 配列を指定します。other が配列でなければ to_ary
  メソッドによる暗黙の型変換を試みます。
---
:fromNick: ! '!'
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: test
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: ! '!'
:body: 授業支援で利用されている履修情報は、システムの便宜上に修正されている場合があります。
---
:fromNick: test
:body: 配列の内容を times 回 繰り返した新しい配列を作成し返します。 値はコピーされないことに注意してください
---
:fromNick: ! '!'
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: test
:body: 自身と other の内容を繋げた配列を生成して返します。
---
:fromNick: ! '!'
:body: どうして？
---
:fromNick: test
:body: 要素の同一性は Object#eql? により評価されます。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: self 中で重複していて、other中に存在していなかった要素は、その重複が保持されます。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: 中学の頃の生徒会選挙、生徒会メンバーがほぼ全員嫌われてたので不信任出まくって酷い事になった
---
:fromNick: ! '!'
:body: こんばんは。
---
:fromNick: test
:body: 指定された obj を自身の末尾に破壊的に追加します。Array#push と同じです。
---
:fromNick: ! '!'
:body: 何？
---
:fromNick: test
:body: 自身と other の各要素をそれぞれ順に <=> で比較していき、結果が 0 でなかった場合に その値を返します。各要素が等しく、配列の長さも等しい場合には
  0 を返します。 各要素が等しいまま一方だけ配列の末尾に達した時、自身の方が短ければ -1 をそうでなければ 1 を返します。
---
:fromNick: ! '!'
:body: 不確定だ。
---
:fromNick: test
:body: nth 番目の要素を返します。nth 番目の要素が存在しない時には nil を返します。
---
:fromNick: ! '!'
:body: nth 番目の要素を返します。nth 番目の要素が存在しない時には nil を返します。
---
:fromNick: test
:body: Range オブジェクト range の範囲にある要素からなる部分配列を返します。 range の first の値が配列の範囲に収まらない場合 nil
  を返します。 range の first が end より後にある場合には空の配列を返します。
---
:fromNick: ! '!'
:body: 配列の内容を times 回 繰り返した新しい配列を作成し返します。 値はコピーされないことに注意してください
---
:fromNick: test
:body: start 番目から length 個の要素を含む部分配列を返します。 length が負の時、start が自身の範囲を越えた時には nil を返します。
---
:fromNick: ! '!'
:body: 自身と other の各要素をそれぞれ順に <=> で比較していき、結果が 0 でなかった場合に その値を返します。各要素が等しく、配列の長さも等しい場合には
  0 を返します。 各要素が等しいまま一方だけ配列の末尾に達した時、自身の方が短ければ -1 をそうでなければ 1 を返します。
---
:fromNick: test
:body: hi
---
:fromNick: ! '!'
:body: 要素の同一性は Object#eql? により評価されます。
---
:fromNick: test
:body: nth 番目の要素を val に設定します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: Range オブジェクト range の範囲にある要素を配列 val の内容に置換します。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: インデックス start から length 個の要素を配列 val の内容で置き換えます。
---
:fromNick: ! '!'
:body: こんばんは。
---
:fromNick: test
:body: self が文字列の配列の場合
---
:fromNick: ! '!'
:body: 何？
---
:fromNick: test
:body: hi
---
:fromNick: ! '!'
:body: 何？
---
:fromNick: test
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: replaceWords
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: ! '!'
:body: こんばんは。
---
:fromNick: test
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: ! '!'
:body: 何？
---
:fromNick: test
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: ! '!'
:body: 不確定だ。
---
:fromNick: test
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: ! '!'
:body: hi
---
:fromNick: test
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: ! '!'
:body: 最近の発言者
---
:fromNick: test
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: ! '!'
:body: 最近の発言者
---
:fromNick: test
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: ! '!'
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 授業支援で利用されている履修情報は、システムの便宜上に修正されている場合があります。
---
:fromNick: test
:body: 配列の配列を検索して、その 0 番目の要素が key に等しい最初の 要素を返します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 配列の配列を検索して、その 0 番目の要素が key に等しい最初の 要素を返します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 配列の pos の位置にある要素を返します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 配列の pos の位置にある要素を返します。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: 配列の要素をすべて削除して空にします。
---
:fromNick: ! '!'
:body: こんばんは。
---
:fromNick: test
:body: レシーバと同じ内容を持つ新しい配列を返します。
---
:fromNick: ! '!'
:body: 何？
---
:fromNick: test
:body: 各要素を順番にブロックに渡して評価し、その結果で要素を
---
:fromNick: ! '!'
:body: 不確定だ。
---
:fromNick: test
:body: 置き換えます。各要素を順番にブロックに渡して評価し、その結果で要素を 置き換えます。
---
:fromNick: ! '!'
:body: なんでやねん。
---
:fromNick: test
:body: 各要素を順番にブロックに渡して評価し、その結果で要素を 置き換えます。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 各要素を順番にブロックに渡して評価し、その結果で要素を 置き換えます。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: ブロックが与えられなかった場合は、自身と map! から生成した
---
:fromNick: ! '!'
:body: こんばんは。
---
:fromNick: test
:body: hi
---
:fromNick: ! '!'
:body: どうして？
---
:fromNick: test
:body: サイズ n の組み合わせをすべて生成し、それを引数としてブロックを実行します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: hu
---
:fromNick: ! '!'
:body: 授業支援で利用されている履修情報は、システムの便宜上に修正されている場合があります。
---
:fromNick: test
:body: システムの便宜上に修正されている場合があります。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: システムの便宜上に修正されている場合があります。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: サイズ n の組み合わせをすべて生成し、それを引数としてブロックを実行します。
---
:fromNick: ! '!'
:body: こんばんは。
---
:fromNick: test
:body: compact は自身から nil を取り除いた配列を生成して返します。
---
:fromNick: ! '!'
:body: 何？
---
:fromNick: test
:body: compact は自身から nil を取り除いた配列を生成して返します。
---
:fromNick: ! '!'
:body: 不確定だ。
---
:fromNick: test
:body: compact は自身から nil を取り除いた配列を生成して返します。
---
:fromNick: ! '!'
:body: 処理の高速化のために内部で Hash を使用しているためです。@param other 配列を指定します。other が配列でなければ to_ary
  メソッドによる暗黙の型変換を試みます。
---
:fromNick: test
:body: compact は自身から nil を取り除いた配列を生成して返します。
---
:fromNick: ! '!'
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: test
:body: compact は自身から nil を取り除いた配列を生成して返します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: compact は自身から nil を取り除いた配列を生成して返します。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: compact は自身から nil を取り除いた配列を生成して返します。
---
:fromNick: ! '!'
:body: こんばんは。
---
:fromNick: test
:body: hi
---
:fromNick: ! '!'
:body: 指定された obj を自身の末尾に破壊的に追加します。Array#push と同じです。
---
:fromNick: test
:body: hi
---
:fromNick: ! '!'
:body: hi
---
:fromNick: test
:body: good
---
:fromNick: ! '!'
:body: 何？
---
:fromNick: test
:body: そうですね
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: ええ
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: hi
---
:fromNick: ! '!'
:body: start 番目から length 個の要素を含む部分配列を返します。 length が負の時、start が自身の範囲を越えた時には nil を返します。
---
:fromNick: test
:body: hi
---
:fromNick: ! '!'
:body: 集合の積演算です。両方の配列に含まれる要素からなる新しい配列を返 します。重複する要素は取り除かれます。
---
:fromNick: test
:body: good
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 変換元のエンコーディングを表す指定列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: 変換元のエンコーディングを表す指定列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 変換元のエンコーディングを表す指定列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 変換元のエンコーディングを表す指定列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: 配列を指定します。指定 が配列でなければ エンコーディング メソッドによる暗黙の型変換を試みます
---
:fromNick: ! '!'
:body: こんばんは。
---
:fromNick: test
:body: ! '@msgFilter'
---
:fromNick: ! '!'
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: こんばんは。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: ! '@settings[:teacher_mode]'
---
:fromNick: ! '!'
:body: なんでやねん。
---
:fromNick: test
:body: ! '@settings[:teacher_mode]'
---
:fromNick: ! '!'
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: test
:body: ! '@settings[:teacher_mode]'
---
:fromNick: ! '!'
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: test
:body: ! '@settings[:teacher_mode]'
---
:fromNick: ! '!'
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: test
:body: ! '@cache[mid]'
---
:fromNick: ! '!'
:body: 処理の高速化のために内部で Hash を使用しているためです。@param other 配列を指定します。other が配列でなければ to_ary
  メソッドによる暗黙の型変換を試みます。
---
:fromNick: test
:body: ! '@cache[mid]'
---
:fromNick: ! '!'
:body: start が自身の末尾を越える時には配列の長さを自動的に拡張し、拡張した領域を nil で初期化します。
---
:fromNick: test
:body: エンコーディング列か エンコーディング オブジェクトを指定します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: エンコーディング列か エンコーディング オブジェクトを指定します。
---
:fromNick: ! '!'
:body: おはよう。
---
:fromNick: test
:body: エンコーディング列か エンコーディング オブジェクトを指定します。
---
:fromNick: ! '!'
:body: こんにちは。
---
:fromNick: test
:body: エンコーディング列か エンコーディング オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: ! '!'
:body: 処理の高速化のために内部で Hash を使用しているためです。@param other 配列を指定します。other が配列でなければ to_ary
  メソッドによる暗黙の型変換を試みます。
---
:fromNick: test
:body: 処理の高速化のために内部で Hash を使用しているためです。@param other 配列を指定します。other が配列でなければ to_ary
  メソッドによる暗黙の型変換を試みます。
---
:fromNick: ! '!'
:body: Range オブジェクト range の範囲にある要素からなる部分配列を返します。 range の first の値が配列の範囲に収まらない場合 nil
  を返します。 range の first が end より後にある場合には空の配列を返します。
---
:fromNick: test
:body: エンコーディング列か エンコーディング オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 要素の重複判定は、Object#eql? により行われます。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 自身と other の内容を繋げた配列を生成して返します。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 授業支援で利用されている履修情報は、システムの便宜上に修正されている場合があります。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 配列の内容を times 回 繰り返した新しい配列を作成し返します。 値はコピーされないことに注意してください
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 要素の同一性は Object#eql? により評価されます。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 議事録管理システム 停止のお知らせ
---
:fromNick: test
:body: resMid, prob
---
:fromNick: ! '!'
:body: 配列の配列を検索して、その 0 番目の要素が key に等しい最初の 要素を返します。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 処理の高速化のために内部で Hash を使用しているためです。@param other 配列を指定します。other が配列でなければ to_ary
  メソッドによる暗黙の型変換を試みます。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 要素の重複判定は、Object#eql? により行われます。
---
:fromNick: test
:body: mid += @log.size if mid < 0
---
:fromNick: ! '!'
:body: hi
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 要素の重複判定は、Object#eql? により行われます。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: ! '@cache'
---
:fromNick: ! '!'
:body: 置き換えます。各要素を順番にブロックに渡して評価し、その結果で要素を 置き換えます。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: ! ']変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。'
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 変換元のエンコーディングを表す文字列か Encoding オブジェクトを指定します。
---
:fromNick: ! '!'
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: test
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: ! '!'
:body: compact は自身から nil を取り除いた配列を生成して返します。
---
:fromNick: test
:body: 指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。
---
:fromNick: ! '!'
:body: compact は自身から nil を取り除いた配列を生成して返します。
---
:fromNick: test
:body: compact は自身から nil を取り除いた配列を生成して返します。
---
:fromNick: ! '!'
:body: Range オブジェクト range の範囲にある要素からなる部分配列を返します。 range の first の値が配列の範囲に収まらない場合 nil
  を返します。 range の first が end より後にある場合には空の配列を返します。
---
:fromNick: test
:body: compact は自身から nil を取り除いた配列を生成して返します。
---
:fromNick: ! '!'
:body: Range オブジェクト range の範囲にある要素からなる部分配列を返します。 range の first の値が配列の範囲に収まらない場合 nil
  を返します。 range の first が end より後にある場合には空の配列を返します。
---
:fromNick: test
:body: nth 番目の要素を返します。nth 番目の要素が存在しない時には nil を返します。
---
:fromNick: ! '!'
:body: Range オブジェクト range の範囲にある要素からなる部分配列を返します。 range の first の値が配列の範囲に収まらない場合 nil
  を返します。 range の first が end より後にある場合には空の配列を返します。
